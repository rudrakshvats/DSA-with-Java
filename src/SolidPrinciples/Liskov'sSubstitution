Liskov's Substitution Principle states that if a class A has a subclass class B then class can act as a substitute of class A provided that class B extends each and
every type of behaviour of class A as well have its own behaviour. This simple means that if class A has two methods/variables then not only class B can have those two methods/variables but other methods/variables as well.

In easy words, Liskov's Substitution Principle states that the subclass should extend the capability of the parent class not narrow it down.

For example, we have an interface BikeService which has two abstract methods turnOnEngine and accelerate. Now lets take one class MotorcycleServiceImpl which implements BikeService interface. Motorcycle class will must override turnOnEngine and accelerate method. We can provide the method body to these methods. Now let us create another class BicycleServiceImpl which also implements BikeService interface. Now let us suppose in these two methods, we have one method which throws exception like in turnOnEngine, now since a bicycle does not have any engine, it should throw an error or some line which shows that turnOnEngine method cannot be called. Thus we are narrowing the capability of methods of BikeService class by throwing exception which is not a standard approach. So, creating MotorcycleServiceImpl class will extend not narrow the capability of BikeService interface but not BicycleServiceImpl class.