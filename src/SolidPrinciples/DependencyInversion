Dependency Inversion principle states that classes should depend on interfaces rather than concrete classes.

For example we have two interfaces Mouse interface which has two separate concrete classes WiredMouse and WirelessMouse and other one is Keyboard interface which has two separate concrete classes WiredKeyboard and WirelessKeyboard. Now we have one class Macbook which has two instance variables WiredKeyboard and WiredMouse as final and the non parameterised constructor creates object of these instance variables. This approach is not feasible according to Dependency Inversion principle. Instead what we can do is that we can have two instance variables of Keyboard and Mouse so that there can be a parameterised constructor with these instance variables as parameters. Now since we have concrete classes are implementing these interfaces, it means that we are making our class depend on interface rather than concrete classes directly. Whenever we are using Macbook's parameterised constructor we can pass any type of combination of WiredKeyboard, WirelessKeyboard, WiredMouse and WirelessMouse in this constructor to use it.