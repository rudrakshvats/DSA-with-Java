Single Responsibility principle has one role in programming: "A class should and always have 1 reason to change".

Let's suppose we have one class Marker which has parameters like name, colour, yearOfManufacture and dateOfManufacture. We also have another class which is Invoice. This class contains two parameters Marker class and parameter quantity. This class also have three methods. First to calculateTotalInvoiceAmount, second to printInvoice and third to saveInvoiceObjectToDatabase. Now suppose we get to know that we are introducing two new parameters like gst and discount. What will happen is that we would have to change the calculateTotalInvoiceAmount method, printInvoice method and saveInvoiceObjectToDatabase method. But according to Single Responsibility principle we should and always have 1 reason to change, in our case there are three. So in order to proceed with Single Responsibility principle we will keep the calculateTotalInvoiceAmount inside the Invoice class and make two separate classes like InvoiceDao for saveInvoiceObjectToDatabase method and InvoicePrinterService for printInvoice method. Both the methods will have Invoice class as the input parameter. Thus any changes in the Invoice class we automatically be carried in our other classes as well.