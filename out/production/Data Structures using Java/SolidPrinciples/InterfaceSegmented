According to Interface Segmented Principle, interface should be designed in such way that client do not have to implement unnecessary methods.

What does it mean?
Suppose we have an interface RestaurantEmployeeService which has three abstract methods washDishes, serveCustomers and cookFood, Now let us create a class WaiterServiceImpl which implements RestaurantEmployeeService interface. Since WaiterServiceImpl is implementing the RestaurantEmployeeService, it has to implement all three functions of it. But as we know a waiter cannot wash dishes and even cook food so by logic it should only have serveCustomer method. But since implementation is already done, we need to have the other two methods as well. Now Interface Segmented principle says that instead of creating RestaurantEmployeeService interface we can create two separate interfaces like WaiterInterface and ChefInterface. The WaiterServiceInterface will contain the abstract methods that by logic only waiter can do and ChefServiceInterface will contain the abstract methods that by logic only a chef can perform. Thus WaiterServiceImpl will implement only WaiterServiceInterface not ChefServiceInterface. So we see that we have segmented the RestaurantEmployeeService into two interfaces spo that client can implement only necessary functions.